<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>机器学习（Machine Learning）学习总结</title>
    <link href="/2020/08/13/Machine-Learning/"/>
    <url>/2020/08/13/Machine-Learning/</url>
    
    <content type="html"><![CDATA[<p>人工智能（Artificial Intelligence）、机器学习（Machine Learning）、深度学习（Deep Learning）、神经网络（Neutral Network）等等这些专业术语在平时学习和工作中经常出现，但有时感觉似懂非懂，傻傻分不清楚，所以决定在此简单的总结一下。</p><a id="more"></a><p><img src="/2020/08/13/Machine-Learning/AI.png" alt="AI"></p><p>从上图可以看出，<strong>人工智能、机器学习、神经网络、深度学习之间是包含关系</strong>，「人工智能」是最大的圈，它包括「机器学习」（机器根据数据“自学”）和「非机器学习」（机器从人直接获取指令）。「神经网络」是「机器学习」的一部分，它是由一个个「神经元」搭建的系统，多层的「神经网络」就叫做「深度学习」。</p><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p><strong>人工智能（Artificial Intelligence）是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门技术科学。</strong> 简单地说，就是给机器赋予人的智能。其基本原理：机器从「特定的」大量数据中总结规律，形成某些「特定的知识」，然后将这种「知识」应用到现实场景中去解决实际问题。</p><p>人工智能可分三个级别：</p><ol><li><strong>弱人工智能</strong>：限定领域解决特定问题。</li><li><strong>强人工智能</strong>：通用领域胜任人类所有工作。</li><li><strong>超人工智能</strong>：远超人类智慧。</li></ol><p>我们现在还处在弱人工智能阶段，强人工智能还远没有实现，而超人工智能更是连影子都看不到。</p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p><strong>机器学习（Machine Learning）是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。</strong> 机器学习是人工智能的核心，是使计算机具有智能的根本途径，最基本的做法是使用算法解析数据、从中学习，然后对真实世界中的事件作出决策或预测。</p><h2 id="机器学习分类"><a href="#机器学习分类" class="headerlink" title="机器学习分类"></a>机器学习分类</h2><p>按模型训练方式分：</p><ul><li>监督学习（Supervised Learning）</li><li>无监督学习（Unsupervised Learning）</li><li>半监督学习（Semi-supervised Learning）</li><li>强化学习（Reinforcement Learning）</li></ul><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><p>监督学习（Supervised Learning）是从有标记的训练数据中推导出预测函数，需要有明确的目标，清楚自己想要什么结果。简言之：<strong>给定数据，预测标签。</strong></p><p>监督并不是人站在机器旁边看机器做的对不对，而是下面的流程：</p><ol><li>选择合适的模型</li><li>把已知的“问题和答案”（训练集）提供给机器去学习</li><li>机器总结出自己的“方法论”</li><li>把“新的问题”（测试集）提供给机器去解答</li></ol><p>监督学习的特点：</p><ul><li>目标明确</li><li>需要带标签的训练数据</li><li>效果容易评估</li></ul><p>监督学习主要任务：</p><ul><li><strong>回归</strong>：预测连续的、具体的数值</li><li><strong>分类</strong>：对各种事物分类，用于离散型预测</li></ul><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>无监督学习（Unsupervised Learning）本质上是一种统计手段，在没有标签的数据里发现潜在的一些结构的训练方法。简言之：<strong>给定数据，寻找隐藏的结构。</strong></p><p>无监督学习的特点：</p><ul><li>没有明确的目的</li><li>不需要给数据打标签</li><li>无法量化效果</li></ul><p>无监督学习应用场景：</p><ul><li>发现异常数据</li><li>细分用户</li><li>给用户做推荐</li></ul><p>无监督学习主要任务:</p><ul><li><strong>聚类</strong>：简单说就是一种自动分类的方法，在监督学习中，你很清楚每一个分类是什么，但是聚类则不是，你并去清楚聚类后的每个分类代表什么意思。</li><li><strong>降维</strong>：感觉像是压缩，是为了在尽可能保存相关的结构的同时降低数据的复杂度。</li></ul><h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><p>半监督学习（Semi-supervised Learning）属于无监督学习和监督学习之间，使用标记和未标记的数据来执行有监督学习或者无监督学习任务。</p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>强化学习（Reinforcement Learning）主要基于决策进行训练，根据输出结果（决策）的成功或失败来训练算法，通过大量经验训练优化后的算法将能够给出较好的预测。简言之：<strong>给定数据，学习如何选择一系列行动，以最大化长期收益。</strong></p><p>强化学习特点：</p><ul><li>决策流程</li><li>激励系统</li><li>学习一系列的行动</li></ul><p>强化学习主要任务：</p><ul><li><strong>科学决策</strong>：优化决策以得到最佳结果。</li><li><strong>动态规划</strong>：把复杂问题分解成若干个子问题，通过寻找子问提的最优解来得到复杂问题的最优解。</li></ul><h2 id="机器学习任务"><a href="#机器学习任务" class="headerlink" title="机器学习任务"></a>机器学习任务</h2><p>最常见的机器学习任务有三种：</p><ul><li>回归（Regression）</li><li>分类（Classification）</li><li>聚类（Clustering）</li></ul><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>回归算法是一种对数值型连续随机变量进行预测和建模的监督学习方法。使用案例包括房价预测、股票走势或测试成绩等连续变化的案例。</p><p>回归任务的特点是标注的数据集具有数值型的目标变量。也就是说，每一个观察样本都有一个数值型的标注真值以监督算法。</p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>线性回归（Linear Regression）是处理回归任务最常用的算法之一。该算法的形式十分简单，它期望使用一个超平面拟合数据集（只有两个变量的时候就是一条直线）。如果数据集中的变量存在线性关系，那么其就能拟合地非常好。</p><p><img src="/2020/08/13/Machine-Learning/linear-regression.png" alt="linear-gression"></p><p>在实践中，简单的线性回归通常被使用正则化的回归方法（LASSO、Ridge 和 Elastic-Net）所代替。正则化其实就是一种对过多回归系数采取惩罚以减少过拟合风险的技术。当然，我们还得确定惩罚强度以让模型在欠拟合和过拟合之间达到平衡。</p><ul><li>优点：线性回归的理解与解释都十分直观，并且还能通过正则化来降低过拟合的风险。另外，线性模型很容易使用随机梯度下降和新数据更新模型权重。</li><li>线性回归在变量是非线性关系的时候表现很差。并且其也不够灵活以捕捉更复杂的模式，添加正确的交互项或使用多项式很困难并需要大量时间。</li></ul><h4 id="回归树"><a href="#回归树" class="headerlink" title="回归树"></a>回归树</h4><p>回归树（Regression Tree）（回归决策树，决策树的一种）通过将数据集重复分割为不同的分支而实现分层学习，分割的标准是最大化每一次分离的信息增益。这种分支结构让回归树很自然地学习到非线性关系。</p><p><img src="/2020/08/13/Machine-Learning/regression-tree.png" alt="regression-tree"></p><p>单一的回归树往往是不够用的，可以利用集成学习中的boosting框架对回归树进行改良升级，如梯度提升树（Gradient Boost Decision Tree）就是集成了许多独立训练的树。这种算法的主要思想就是组合多个弱学习算法而成为一种强学习算法，不过这里并不会具体地展开。在实践中 RF 通常很容易有出色的表现，而 GBM 则更难调参，不过通常梯度提升树具有更高的性能上限。</p><ul><li><p>优点：决策树能学习非线性关系，对异常值也具有很强的鲁棒性。集成学习在实践中表现非常好，其经常赢得许多经典的（非深度学习）机器学习竞赛。</p></li><li><p>缺点：无约束的，单棵树很容易过拟合，因为单棵树可以保留分支（不剪枝），并直到其记住了训练数据。集成方法可以削弱这一缺点的影响。</p></li></ul><h4 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h4><p>深度学习（Deep Learning）是指能学习极其复杂模式的多层神经网络。该算法使用在输入层和输出层之间的隐藏层对数据的中间表征建模，这也是其他算法很难学到的部分。</p><p><img src="/2020/08/13/Machine-Learning/deep-learning-regression.png" alt="deep-learning"></p><p>深度学习还有其他几个重要的机制，如卷积和 drop-out 等，这些机制令该算法能有效地学习到高维数据。然而深度学习相对于其他算法需要更多的数据，因为其有更大数量级的参数需要估计。</p><ul><li><p>优点：深度学习是目前某些领域最先进的技术，如计算机视觉和语音识别等。深度神经网络在图像、音频和文本等数据上表现优异，并且该算法也很容易对新数据使用反向传播算法更新模型参数。它们的架构（即层级的数量和结构）能够适应于多种问题，并且隐藏层也减少了算法对特征工程的依赖。</p></li><li><p>缺点：深度学习算法通常不适合作为通用目的的算法，因为其需要大量的数据。实际上，深度学习通常在经典机器学习问题上并没有集成方法表现得好。另外，其在训练上是计算密集型的，所以这就需要更富经验的人进行调参（即设置架构和超参数）以减少训练时间。</p></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>分类方法是一种对离散型随机变量建模或预测的监督学习算法。使用案例包括邮件过滤、金融欺诈和预测雇员异动等输出为类别的任务。</p><p>许多回归算法都有与其相对应的分类算法，分类算法通常适用于预测一个类别（或类别的概率）而不是连续的数值。</p><h4 id="分类树"><a href="#分类树" class="headerlink" title="分类树"></a>分类树</h4><p>分类树（Classification Tree）（分类决策树，和回归树对应也是决策树的一种）。<br>相应的，随机森林（Random Forest）是分类树的一种集成形式。</p><p><img src="/2020/08/13/Machine-Learning/random-forest.png" alt="random-forest"></p><ul><li><p>优点：同回归方法一样，分类树的集成方法在实践中同样表现十分优良。它们通常对异常数据具有相当的鲁棒性和可扩展性。因为它的层级结构，分类树的集成方法能很自然地对非线性决策边界建模。</p></li><li><p>缺点：不可约束，单棵树趋向于过拟合，使用集成方法可以削弱这一方面的影响。</p></li></ul><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>逻辑回归（Logistic Regression）是与线性回归相对应的一种分类方法，一般用于需要明确输出的场景，如某些事件的发生（预测是否会发生降雨）。通常，逻辑回归使用某种函数将概率值压缩到某一特定范围。逻辑回归通过逻辑函数（即Sigmoid函数）将预测映射到0到1中间，因此预测值就可以看成某个类别的概率。</p><p><img src="/2020/08/13/Machine-Learning/logistic-regression.png" alt="logistic-regression"></p><p>该模型仍然还是「线性」的，所以只有在数据是线性可分（即数据可被一个超平面完全分离）时，算法才能有优秀的表现。同样 Logistic 模型能惩罚模型系数而进行正则化。</p><ul><li><p>优点：输出有很好的概率解释，并且算法也能正则化而避免过拟合。Logistic 模型很容易使用随机梯度下降和新数据更新模型权重。</p></li><li><p>缺点：Logistic 回归在多条或非线性决策边界时性能比较差。</p></li></ul><h4 id="k-最近邻算法"><a href="#k-最近邻算法" class="headerlink" title="k-最近邻算法"></a>k-最近邻算法</h4><p>k-最近邻算法（k-Nearest Neighbor, KNN）是一种基本分类和回归方法，即给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的k个实例，这k个实例的多数属于某个类，就把该输入实例分到这个类中。用最近的邻居（k）来预测未知数据点。k值是预测精度的一个关键因素，无论是分类还是回归，衡量邻居的权重都非常有用，较近邻居的权重比较远邻居的权重大。</p><p><img src="/2020/08/13/Machine-Learning/KNN.png" alt="KNN"></p><p>用KNN算法给新输入的实例分类，只要找到离它最近的k个实例，看哪个类别多即可。而k值的选取，既不能太小，也不能太大，需要实验调整参数确定。</p><ul><li>优点：简单好用，容易理解，精度高，可用于数值型和离散型数据。</li><li>缺点：对数据的局部结构非常敏感，计算量大，需要对数据进行规范化处理，使每个数据点都在相同的范围。</li></ul><h4 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h4><p>支持向量机（Support Vector Machine, SVM）可以使用一个称之为核函数的技巧扩展到非线性分类问题，而该算法本质上就是计算两个称之为支持向量的观测数据之间的距离。SVM 算法寻找的决策边界即最大化其与样本间隔的边界，因此支持向量机又称为大间距分类器。需要注意的是，支持向量机需要对输入数据进行完全标记，仅直接适用于两类任务，应用到多类任务时需要将其减少到几个二元问题。</p><p><img src="/2020/08/13/Machine-Learning/svm.png" alt="svm"></p><p>SVM使用线性核函数就能得到类似于logistic回归的结果，只不过支持向量机因为最大化了间隔而更具鲁棒性。因此，在实践中，SVM最大的优点就是可以使用非线性核函数对非线性决策边界建模。</p><ul><li>优点：SVM 能对非线性决策边界建模，并且有许多可选的核函数形式。SVM同样面对过拟合有相当大的鲁棒性，这一点在高维空间中尤其突出。</li><li>缺点：然而，SVM是内存密集型算法，由于选择正确的核函数是很重要的，所以其很难调参，也不能扩展到较大的数据集中。目前在工业界中，随机森林通常优于支持向量机算法。</li></ul><h4 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h4><p>朴素贝叶斯（Naive Bayes）是一种基于贝叶斯定理和特征条件独立假设的分类方法。本质上朴素贝叶斯模型就是一个概率表，其通过训练数据更新这张表中的概率。为了预测一个新的观察值，朴素贝叶斯算法就是根据样本的特征值在概率表中寻找最大概率的那个类别。之所以称之为「朴素」，是因为该算法的核心就是特征条件独立性假设（每一个特征之间相互独立），而这一假设在现实世界中基本是不现实的。</p><p>$P(y|x_1,…,x_n)=\frac{P(y)\prod(^n_{i=1}P(x_i|y)))}{P(x_1,…,x_n)}$</p><ul><li>优点：即使条件独立性假设很难成立，但朴素贝叶斯算法在实践中表现出乎意料地好。该算法很容易实现并能随数据集的更新而扩展。</li><li>缺点：因为朴素贝叶斯算法太简单了，所以其也经常被以上列出的分类算法所替代。</li></ul><h4 id="深度学习-1"><a href="#深度学习-1" class="headerlink" title="深度学习"></a>深度学习</h4><p>深度学习（Deep Learning）同样很容易适应于分类问题。实际上，深度学习应用更多的是分类任务，如图像分类等。</p><ul><li>优点：深度学习非常适用于分类音频、文本和图像数据。<br>*缺点：和回归问题一样，深度神经网络需要大量的数据进行训练，所以其也不是一个通用目的的算法。</li></ul><h3 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h3><p>聚类是一种无监督学习任务，该算法基于数据的内部结构寻找观察样本的自然族群（即集群）。使用案例包括细分客户、新闻聚类、文章推荐等。</p><p>因为聚类是一种无监督学习（即数据没有标注），并且通常使用数据可视化评价结果。如果存在「正确的回答」（即在训练集中存在预标注的集群），那么分类算法可能更加合适。</p><h4 id="k均值聚类"><a href="#k均值聚类" class="headerlink" title="k均值聚类"></a>k均值聚类</h4><p>k均值聚类（K-Means Clustering）是一种通用目的的算法，聚类的度量基于样本点之间的几何距离（即在坐标平面中的距离）。集群是围绕在聚类中心的族群，而集群呈现出类球状并具有相似的大小。</p><p><img src="/2020/08/13/Machine-Learning/k-means.png" alt="k-mans"></p><p>K-Means算法把n个点（可以是样本的一次观察或一个实例）划分到k个集群（cluster），使得每个点都属于离他最近的均值（即聚类中心，centroid）对应的集群。重复上述过程一直持续到重心不改变。</p><ul><li>优点：K 均值聚类是最流行的聚类算法，因为该算法足够快速、简单，并且如果你的预处理数据和特征工程十分有效，那么该聚类算法将拥有令人惊叹的灵活性。</li><li>缺点：该算法需要指定集群的数量，而 K 值的选择通常都不是那么容易确定的。另外，如果训练数据中的真实集群并不是类球状的，那么 K 均值聚类会得出一些比较差的集群。</li></ul><h4 id="层次聚类"><a href="#层次聚类" class="headerlink" title="层次聚类"></a>层次聚类</h4><p>层次聚类（Hierarchical Clustering）通过计算不同类别数据点之间的相似度来创建一棵有层次的嵌套聚类树，在聚类树中，不同类别的原始数据点是树的最底层，树的顶层是一个聚类的根节点。创建聚类树有自下而上合并和自上而下分裂两种方法，常见的是合并方法。</p><p><img src="/2020/08/13/Machine-Learning/HC.png" alt="HC"></p><p>层次聚类的合并算法是通过计算每一个类别的数据点与所有数据点之间的距离来确定它们之间的相似性，距离越小，相似度越高。并将距离最近的两个数据点或类别进行组合，生成聚类树。</p><ul><li>优点：层次聚类最主要的优点是集群不再需要假设为类球形。另外其也可以扩展到大数据集。</li><li>缺点：有点像k均值聚类，该算法需要设定集群的数量（即在算法完成后需要保留的层次）。</li></ul><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>神经网络（Neural Networks)是人工智能领域机器学习一部分，就好像人体的神经元、神经系统一样，人工智能的神经网络就是由一个个神经元搭建的系统，多层的神经网络就叫做深度神经网络（Deep Neural Network, <strong>DNN</strong>），也就是深度学习。它是机器学习最重要的一个分支，也是最流行一种的机器学习算法！</p><p>DNN已经演变成许多不同的网络拓扑结构，比如，卷积神经网络（Convolutional Neural Networks, <strong>CNN</strong>）、循环神经网络（Recurrent Neural Networks, <strong>RNN</strong>）、长短期记忆（Long Short Term Memory, <strong>LSTM</strong>）、生成敌对网络（Generativ Adversarial Networks, <strong>GAN</strong>）等。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://easyai.tech/ai-definition/ai/">人工智能相关知识</a></li><li><a href="https://www.jiqizhixin.com/articles/2017-05-20-3">回归、分类与聚类</a></li><li><a href="https://zhuanlan.zhihu.com/p/33794257">Machine Learning:十大机器学习算法</a></li><li><a href="https://towardsdatascience.com/understanding-neural-networks-from-neuron-to-rnn-cnn-and-deep-learning-cd88e90e0a90">Understanding Neutral Networks</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习（machine learning）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>introduction</tag>
      
      <tag>machine Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>svn的安裝与使用</title>
    <link href="/2020/08/03/svn/"/>
    <url>/2020/08/03/svn/</url>
    
    <content type="html"><![CDATA[<p>本文介绍如何在ubuntu上的搭建svn服务器以及如何使用svn。</p><a id="more"></a><h2 id="安装svn服务器软件subversion"><a href="#安装svn服务器软件subversion" class="headerlink" title="安装svn服务器软件subversion"></a>安装svn服务器软件subversion</h2><p>ubuntu系统不自带svn，需要自己安装：</p><pre><code class="hljs bash">sudo apt-get install subversion</code></pre><h2 id="创建svn目录"><a href="#创建svn目录" class="headerlink" title="创建svn目录"></a>创建svn目录</h2><p>在home下创建svn文件夹：</p><pre><code class="hljs bash">sudo mkdir /home/svn</code></pre><p>在新创建的svn文件夹下创建repo文件夹（svn的版本仓库存放目录）：</p><pre><code class="hljs bash">sudo mkdir /home/svn/repo</code></pre><h2 id="创建svn版本仓库"><a href="#创建svn版本仓库" class="headerlink" title="创建svn版本仓库"></a>创建svn版本仓库</h2><pre><code class="hljs bash">sudo svnadmin create /home/svn/repo</code></pre><h2 id="配置svn服务器"><a href="#配置svn服务器" class="headerlink" title="配置svn服务器"></a>配置svn服务器</h2><p>创建svn用户组：</p><pre><code class="hljs bash">sudo addgroup subversion</code></pre><p>将自己（比如：peng）加入到svn用户组：</p><pre><code class="hljs bash">sudo usermod -a -G subversion peng</code></pre><p>更改权限：</p><pre><code class="hljs bash">sudo chown -R peng:subversion /home/svn/reposudo chmod -R g+rws /home/svn/repo</code></pre><h2 id="访问svn服务器"><a href="#访问svn服务器" class="headerlink" title="访问svn服务器"></a>访问svn服务器</h2><p>访问svn服务器有以下几种协议，下面会一一介绍：</p><table><br>  <tr><br>    <th>协议</th><br>    <th>方式</th><br>  </tr><br>  <tr><br>    <td>file://　</td><br>    <td>直接访问（在相同主机上)</td><br>  </tr><br>  <tr><br>    <td>svn://</td><br>    <td>通过svn用户协议访问</td><br>  </tr><br>  <tr><br>    <td>svn+ssh://</td><br>    <td>和svn://相同，只是通过ssh隧道</td><br>  </tr><br>  <tr><br>    <td>http:// </td><br>    <td>通过WebDAV协议访问subversion支持的Apache 2 web服务器</td><br>  </tr><br>　　<tr><br>    <td>https://</td><br>    <td>和http://次相同，只是用了SSL加密</td><br>  </tr><br></table><h3 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h3><p>不需要做任何设置，直接通过下方指令即可获取本地svn服务器仓库中的资源：</p><pre><code class="hljs bash">svn co file:///home/svn/repo或者svn co file://localhost/home/svn/repo</code></pre><h3 id="svn"><a href="#svn" class="headerlink" title="svn://"></a>svn://</h3><p>需要配置/home/svn/repo/conf目录中的文件。</p><ol><li>svnserve.conf: 服务配置文件：</li></ol><pre><code class="hljs bash"><span class="hljs-comment">#匿名用户不可读</span>anon-access = none<span class="hljs-comment">#权限用户可写</span>auth-access = write<span class="hljs-comment">#密码文件为passwd</span>password-db = passwd<span class="hljs-comment">#权限文件为authz</span>authz-db = authz</code></pre><ol start="2"><li>authz: 用户权限配置文件：</li></ol><pre><code class="hljs bash">[groups]subversion = peng <span class="hljs-comment"># subversion组的用户</span>[/] <span class="hljs-comment"># 必须写/，因为这表示从仓库的目录开始设置权限</span>@subversion = rw <span class="hljs-comment"># subversion组有rw(读写权限)</span>* = r <span class="hljs-comment"># 所有人有r(读权限)</span></code></pre><ol start="3"><li>passwd: 用户密码配置文件：</li></ol><pre><code class="hljs bash">[users] <span class="hljs-comment"># harry = harryssecret</span> <span class="hljs-comment"># sally = sallyssecret</span>peng = 12345 <span class="hljs-comment"># 设定用户peng的密码是12345，是的没错，密码是明文的。</span></code></pre><p>启动svn服务器：</p><pre><code class="hljs bash">svnserve -d -r /home/svn/repo</code></pre><p>(-d: 表示在守护模式运行，-r: 指定服务器的根目录)<br>默认端口为3690，可以根据需要自行更改或者做些其它设置，详情请见<code>svnserve --help</code>。</p><p>停止svn服务器：</p><pre><code class="hljs bash">killall svnserve</code></pre><p>开机默认启动：</p><p>可以添加一个自动启动脚本<code>/etc/init.d/subversion</code>，设置 svn 服务开机默认启动。</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-comment"># start/stop subversion daemon</span><span class="hljs-built_in">test</span> -f /usr/bin/svnserve || <span class="hljs-built_in">exit</span> 0OPTIONS=<span class="hljs-string">&quot;-d -T -r /home/svn/repo&quot;</span><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> <span class="hljs-keyword">in</span> start)  <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Starting subversion daemon:&quot;</span>  <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot; svnserve&quot;</span>  start-stop-daemon --start --quiet --oknodo --chuid root:root --<span class="hljs-built_in">exec</span> /usr/bin/svnserve -- <span class="hljs-variable">$OPTIONS</span>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.&quot;</span>  ;; stop)  <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;Stopping subversion daemon:&quot;</span>  <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot; svnserve&quot;</span>  start-stop-daemon --stop --quiet --oknodo --<span class="hljs-built_in">exec</span> /usr/bin/svnserve  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;.&quot;</span>  ;; reload)  ;; force-reload)  <span class="hljs-variable">$0</span> restart  ;; restart)  <span class="hljs-variable">$0</span> stop  <span class="hljs-variable">$0</span> start  ;; *)  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Usage: /etc/init.d/subversion (start|stop|reload|restart)&quot;</span>  <span class="hljs-built_in">exit</span> 1  ;;<span class="hljs-keyword">esac</span><span class="hljs-built_in">exit</span> 0</code></pre><p>添加执行权限：</p><pre><code class="hljs bash">sudo chmod u+x /etc/init.d/subversion</code></pre><p>测试一下从脚本启动：</p><pre><code class="hljs bash">sudo /etc/init.d/subversion start</code></pre><p>将此脚本设置为开机默认启动：</p><pre><code class="hljs bash">sudo update-rc.d -f subversion defaults</code></pre><p>在svnserve已开启的情况下，通过下方指令获取svn服务器仓库中的资源：</p><pre><code class="hljs bash">svn co svn://hostname repo --username peng</code></pre><h3 id="svn-ssh"><a href="#svn-ssh" class="headerlink" title="svn+ssh://"></a>svn+ssh://</h3><p>设置同svn://，在ssh服务已经打开的情况下，通过下方指令即可获取svn服务器仓库中的资源：</p><pre><code class="hljs bash">svn co svn+ssh://hostname/home/svn/repo repo --username peng</code></pre><p>注意：这里必须加上仓库的完整路径（/home/svn/repo）, 而svn://方式则不用。</p><h3 id="http"><a href="#http" class="headerlink" title="http://"></a>http://</h3><p>需要安装并配置Apache2 web server。</p><p>安装Apache2：</p><pre><code class="hljs bash">sudo apt-get install apache2</code></pre><p>配置Apache2：</p><p>在<code>etc/apache2/mods_available/dav_svn.conf</code>文件中添加以下代码：</p><pre><code class="hljs bash">&lt;Location /home/svn/repo&gt;    DAV svn    SVNPath /home/svn/repo    AuthType Basic    AuthName <span class="hljs-string">&quot;subversion repository&quot;</span>    AuthUserFile /etc/subversion/passwd    Require valid-user&lt;/Location&gt;</code></pre><p>添加Apache2用户www-data并加入到subversion组中：</p><pre><code class="hljs bash">sudo adduser www-data subversion</code></pre><p>重启Apache2服务：</p><pre><code class="hljs bash">sudo /etc/init.d/apache2 restart</code></pre><p>创建用户和密码文件（<code>/etc/subversion/passwd</code>）：</p><pre><code class="hljs bash">sudo htpasswd -c /etc/subversion/passwd peng</code></pre><p>按照提示输入密码即可。<br>通过下面的命令可添加新用户（new_user）：<br><pre><code class="hljs bash">sudo htpasswd /etc/subversion/passwd new_user</code></pre></p><p>配置完成，通过下方指令即可获取svn服务器仓库中的资源：</p><pre><code class="hljs bash">svn co http://hostname/home/svn/repo repo --username peng</code></pre><h3 id="https"><a href="#https" class="headerlink" title="https://"></a>https://</h3><p>设置同http://，但是需要为Apache2配置支持https的数字证书（略）。</p><p>然后通过下方指令即可获取svn服务器仓库中的资源：</p><pre><code class="hljs bash">svn co https://hostname/home/svn/repo repo --username peng</code></pre><h2 id="RabbitVCS"><a href="#RabbitVCS" class="headerlink" title="RabbitVCS"></a>RabbitVCS</h2><p>RabbitVCS是Linux平台下版本控制程序Subversion的GUI前端客户端，使用Python构建，可以与文件管理器Nautilus紧密整合，支持 Subversion(SVN), Git。可替代Windows下的TortoiseSVN。</p><p>Ubuntu用户安装:<br><pre><code class="hljs bash">sudo add-apt-repository ppa:rabbitvcs/ppasudo apt-get updatesudo apt-get install rabbitvcs-core rabbitvcs-cli rabbitvcs-nautilus rabbitvcs-gedit</code></pre></p><p>最后输入以下命令重启Nautilus就可以使用RabbitVCS了。</p><pre><code class="hljs bash">nautilus -qnautilus</code></pre><hr><h2 id="svn常用命令"><a href="#svn常用命令" class="headerlink" title="svn常用命令"></a>svn常用命令</h2><p>以下访问服务器方式均以file:///home/svn/repo为例。</p><p><strong><code>import</code></strong>: 将项目上传到svn服务器，跟commit对应，是将未版本化的文件导入版本库中的最快方法，它会根据需要创建中介目录。</p><pre><code class="hljs bash">svn import myrepo file:///home/svn/repo -m <span class="hljs-string">&quot;Initial import&quot;</span></code></pre><p><strong><code>export</code></strong>: 将项目从服务器导出到本地，跟checkout对应，但是导出的文件夹不含.svn目录，脱离svn版本控制。</p><pre><code class="hljs bash">svn <span class="hljs-built_in">export</span> -r version file:///home/svn/repo</code></pre><p>（通过 <em><code>-r version</code></em> 导出指定版本，不加则默认导出最新版本。）</p><p><strong><code>checkout</code></strong>: 从服务器仓库下载项目到本地，成为本地工作副本。<br><pre><code class="hljs bash">svn checkout file:///home/svn/repo -r version或者svn co -r version file:///home/svn/repo</code></pre><br>（通过 <em><code>-r version</code></em> 导出指定版本，不加则默认下载最新版本。）</p><p><strong><code>trunk, branches, tags</code></strong> 三大目录：</p><p>　trunk: 主干，一般把项目提交到此文件夹里面,在trunk中开发。<br>　branches: 分支，一般把那些需要打分支,但是有可能会修改的项目代码，打分支到此目录。<br>　tags: 分支，一般把那些阶段性(如迭代各期)的项目代码,打分支到此目录。</p><p>新建的svn仓库中没有这三个文件夹，可通过下面两种方式创建：</p><ol><li>将项目从服务器下载到本地，进入生成的项目目录执行以下代码：</li></ol><pre><code class="hljs bash">svn mkdir trunk tags branchessvn commit -m　<span class="hljs-string">&quot;Creating trunk, tags, branches&quot;</span></code></pre><ol start="2"><li>如果不想将项目整个下载到本地，也可以直接使用一条命令创建并提交目录到svn服务器：</li></ol><pre><code class="hljs bash">svn mkdir file:///home/svn/repo/trunk -m <span class="hljs-string">&quot;Creating trunk dir&quot;</span></code></pre><p>另外两个目录使用同样的方式进行创建并提交。</p><p><strong><code>status</code></strong>: 查看工作副本状态。</p><pre><code class="hljs bash">svn status</code></pre><p>第一列表示文件的状态：<br>　，没有修订<br>　A，添加<br>　C，冲突，需要解决冲突状态，才能正常提交代码<br>　D，删除<br>　I，忽略<br>　M，有修改<br>　?，没有版本控制，在工作副本添加文件或目录之后，需要使用svn add your_path才能加该文件加到版本控制<br>　!，文件丢失，如果不是使用svn delete删除文件或目录，会产生此状态</p><p><strong><code>info</code></strong>: 查看工作副本信息。</p><pre><code class="hljs bash">svn info</code></pre><p>能够查看到本工作副本的url、版本等信息。</p><p><strong><code>update</code></strong>: 升级到新版本。</p><pre><code class="hljs bash">svn update -r verison</code></pre><p><strong><code>add</code></strong>: 添加新文件或者目录到版本控制。</p><pre><code class="hljs bash">svn add filesvn add dir</code></pre><p><strong><code>delete</code></strong>: 删除文件或目录。</p><pre><code class="hljs bash">svn delete filesvn delete dir</code></pre><p>如果仅仅是手动使用rm命令或窗口下删除工作副本内的文件或目录，该删除并不会记录svn的状态。可能会导致提交代码时，遗漏了删除文件或目录。因此建议删除svn工作副本内的文件或目录时，使用本命令进行操作。</p><p><strong><code>commit</code></strong>: 提交代码。</p><pre><code class="hljs bash">svn commit [-m message] [file_list]</code></pre><p>如果没有带文件列表，默认把工作副本的所有修订都提交，如果有带文件列表，则只提交文件列表中对应文件的修订。</p><p><strong><code>merge</code></strong>: 合并代码。</p><pre><code class="hljs bash">svn merge -r ver1:ver2 src_url working_copy_path</code></pre><p>可将任意版本的任意修订合并到工作副本中。如果ver1小于ver2，表示合并src_url分支ver1到ver2的修订到本地工作副本；如果ver1大于ver2，表示回退修订。</p><p><strong><code>revert</code></strong>: 回退工作副本的修订。<br><pre><code class="hljs bash">svn revert filesvn revert -R dir</code></pre></p><p><strong><code>log</code></strong>: 查看版本log。</p><pre><code class="hljs bash">svn <span class="hljs-built_in">log</span> [OPTIONS] [FILE_LIST]</code></pre><p>默认只查看工作副本及以前版本的log，可以使用参数过滤得到我们想要的内容，详情请见 <em><code>svn log --help</code></em> 。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://help.ubuntu.com/community/Subversion">Subversion</a></li><li><a href="https://www.jianshu.com/p/0a8cf8bcdacc">SVN基础用法</a></li><li><a href="https://www.jianshu.com/p/6b83b6f2cace">Ubuntu搭建svn服务器</a></li><li><a href="http://ourjs.com/detail/5b1ca77b7ad90c6e47f34b72">Linux搭建SVN服务器，并设置开机默认启动</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>版本控制（git svn）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>svn</tag>
      
      <tag>tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的安装与使用</title>
    <link href="/2020/08/02/git/"/>
    <url>/2020/08/02/git/</url>
    
    <content type="html"><![CDATA[<p>本文介绍git在ubuntu上的安装与使用。</p><a id="more"></a><h2 id="git安装与配置"><a href="#git安装与配置" class="headerlink" title="git安装与配置"></a>git安装与配置</h2><p>ubuntu系统不自带git，需要自己安装：</p><pre><code class="hljs bash">sudo apt-get install git</code></pre><p>安装完成后，设置用户名和邮箱地址：</p><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;YOUR NAME&quot;</span>git config --global user.email <span class="hljs-string">&quot;YOUR EMAIL ADDRESS&quot;</span></code></pre><h2 id="创建本地版本仓库"><a href="#创建本地版本仓库" class="headerlink" title="创建本地版本仓库"></a>创建本地版本仓库</h2><p>在库文件夹比如learngit下初始化git仓库：</p><pre><code class="hljs bash">git init</code></pre><p>在文件夹中添加文件，比如：classification.cpp，然后可以添加文件到git仓库，分两步进行：<br>第一，用git add命令告诉git，将文件添加到仓库：</p><pre><code class="hljs bash">git add README.md</code></pre><p>第二，用git commit命令告诉git，将文件提交到仓库：</p><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;add a new file&quot;</span></code></pre><h2 id="添加到远程仓库"><a href="#添加到远程仓库" class="headerlink" title="添加到远程仓库"></a>添加到远程仓库</h2><p>git是分布式版本控制系统，同一个git仓库可以分布到不同的机器上，这儿的机器，可以指公司的git服务器或者github，下面以github为例，介绍怎样将本地git仓库添加到远程仓库。</p><p>本地仓库和github的连接有两种方式：</p><ul><li>HTTPS连接（比如地址为：<code>https://github.com/gitusername/learngit.git</code>）</li><li>SSH连接（比如地址为：<a href="mailto:`git@github.com">`git@github.com</a>:gitusername/learngit.git`）</li></ul><h3 id="HTTPS连接"><a href="#HTTPS连接" class="headerlink" title="HTTPS连接"></a>HTTPS连接</h3><p>使用HTTPS连接的不同之处在于：其一，不需要SSH key；其二，上面第一条命令地址要改为HTTP地址：</p><pre><code class="hljs bash">git remote add origin https://github.com/gitusername/learngit.git</code></pre><p>步骤简单，也是github推荐的连接方式，然而其缺点为速度比SSH连接方式慢。</p><h3 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h3><p>SSH加密传输首先要有SSH key，生成过程包括：<br>第一步，创建SSH key。输入下面指令：</p><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span></code></pre><p>之后可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><p>第二步，登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。</p><p>然后，在github上创建一个名为learngit的空的仓库（不包含README文件）。</p><p>将本地仓库与github仓库相关联并推送内容包含下面两步：<br>第一，输入下面命令：</p><pre><code class="hljs bash">git remote add origin git@github.com:gitusername/learngit.git</code></pre><p>其中，origin代表远程库，是git的默认叫法。</p><p>第二，将本地库内容推送到远程库：</p><pre><code class="hljs bash">git push -u origin master</code></pre><p>由于远程库是空的，第一次推送master分支时，加上了-u参数，git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。再次推送到远程github仓库时，输入简化的命令即可：</p><pre><code class="hljs bash">git push origin master</code></pre><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2><p>上一节介绍先有本地库，后有远程库的时候，如何关联远程库。假设我们从零开发，最好的方式是先创建远程库，然后，从远程库克隆到本地。</p><p>首先在github上创建一个新的仓库，仓库名为learngit，这次要勾选Initialize this repository with a README。</p><p>远程库已经准备好了，下一步是用命令git clone克隆一个本地库，也分两种方式。<br>SSH连接克隆命令为：</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:gitusername/learngit.git</code></pre><p>HTTP连接克隆命令为：</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/gitusername/learngit.git</code></pre><p>在本地仓库修改完代码后，推送到github库：</p><pre><code class="hljs bash">git push origin master</code></pre><hr><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><pre><code class="hljs bash">git status <span class="hljs-comment"># 查看版本库状态</span>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 查看提交历史</span>git diff <span class="hljs-comment">#　比较当前工作目录与版本库的差别</span>git add file　<span class="hljs-comment"># 向版本库添加文件</span>git add directory/ <span class="hljs-comment"># 向版本库添加文件夹</span>git commit -m <span class="hljs-string">&quot;description&quot;</span> <span class="hljs-comment"># 提交并添加描述</span></code></pre><h3 id="删除文件-夹"><a href="#删除文件-夹" class="headerlink" title="删除文件(夹)"></a>删除文件(夹)</h3><pre><code class="hljs bash">git rm file <span class="hljs-comment"># 同时删除本地文件与远程分支文件</span>git rm --cached file <span class="hljs-comment"># 只删除远程分支文件，保留本地文件</span>git rm -r directory <span class="hljs-comment">#　同时删除本地文件夹与远程分支文件夹</span>git rm -r --cached directory <span class="hljs-comment"># 只删除远程分支文件夹，保留本地文件夹</span></code></pre><h3 id="恢复到指定版本"><a href="#恢复到指定版本" class="headerlink" title="恢复到指定版本"></a>恢复到指定版本</h3><p>项目跟踪工具的一个重要任务之一，就是使我们能够随时恢复到某一阶段的工作。</p><p>命令形式：</p><pre><code class="hljs bash">git reset [--mixed | --soft | --hard]</code></pre><p>其中：<br>　<code>--mixed</code> 仅是重置索引的位置，而不改变你的工作树中的任何东西，并且提示什么内容还没有被更新。这个是默认的选项。<br>　<code>--soft</code> 既不触动索引的位置，也不改变工作树中的任何内容，这个选项使你可以将已经提交的东西重新逆转至＂已更新但未提交（Updated but not Check in）＂的状态。<br>　<code>--hard</code> 将工作树中的内容和头索引都切换至指定的版本位置中，也就是说自 之后的所有的跟踪内容和工作树中的内容都会全部丢失。慎用。</p><p>举例：<br>撤销上次提交（commit），保留当前所有更改：</p><pre><code class="hljs bash">git reset --soft</code></pre><p>彻底恢复到上次提交的版本，放弃当前所有更改：</p><pre><code class="hljs bash">git reset --hard</code></pre><p>彻底返回到最近两次提交之前的版本：</p><pre><code class="hljs bash">git reset --hard HEAD~2</code></pre><h3 id="管理分支"><a href="#管理分支" class="headerlink" title="管理分支"></a>管理分支</h3><p>如果项目存在多个分支就需要进行分支管理。</p><p>查看分支:</p><pre><code class="hljs bash">git branch</code></pre><p>使用以下命令创建分支并将创建的分支设置为当前工作分支：</p><pre><code class="hljs bash">git branch new_branchgit checkout new_branch或者git checkout -b new_branch</code></pre><p>删除分支：</p><pre><code class="hljs bash">git branch -d new_branch <span class="hljs-comment"># 先检查分支是否合并到其他分支上，若没有合并则无法删除</span>git branch -D new_branch <span class="hljs-comment"># 直接删除分支，不会检查分支状态</span></code></pre><p>查看版本库的发展记录:</p><pre><code class="hljs bash">git show-branch</code></pre><p>查看两个版本的差异情况：</p><pre><code class="hljs bash">git diff B1 B2</code></pre><p>合并其他分支到主分支上：</p><pre><code class="hljs bash">git check mastergit merge -m <span class="hljs-string">&quot;merge from new_branch&quot;</span> new_branch或者git pull . new_branch</code></pre><p>合并远程库到本地主分支：</p><pre><code class="hljs bash">git pull --rebase</code></pre><p><strong>注意：</strong> </p><ul><li>执行 <code>git pull --rebase</code> 的时候必须保持本地目录干净。即：不能存在状态为 modified 的文件（存在Untracked files是没关系的）。</li><li>如果出现冲突，可以选择手动解决冲突后继续 rebase，也可以用 <code>git rebase --abort</code> 放弃本次 rebase。</li></ul><p>最后，将本地提交好的分支推送到远程仓库：</p><pre><code class="hljs bash">git push origin master</code></pre><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/u012526120/article/details/49401871">git和github在ubuntu上的使用</a></li><li><a href="https://blog.csdn.net/pcyph/article/details/44035935">git回到指定版本命令</a></li><li><a href="https://juejin.im/post/6844903895160881166">git pull –rebase的正确使用</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>版本控制（git svn）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git vs. svn</title>
    <link href="/2020/08/01/git-vs-svn/"/>
    <url>/2020/08/01/git-vs-svn/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍git和svn的区别与作用。</p><a id="more"></a><h2 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h2><p>git是一个应用最广泛的免费的、开源的分布式版本控制系统，github是最常用的提供远程git仓库托管服务的网站。git与常用的集中式版本控制工具Subversion(svn)不同，它采用了分布式版本库的方法，不依赖服务器端软件支持，其最大特点在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地拷贝一个完整的git仓库。</p><p><strong>工作流程：</strong></p><p>下图是经典的git开发过程。<br><img src="/2020/08/01/git-vs-svn/git_process.jpg" alt="git process"></p><p><strong>功能特性：</strong></p><p>从一般开发者的角度来看，git有以下功能：</p><p>　1．从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>　2．在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>　3．在单机上自己创建的分支上提交代码。<br>　4．在单机上合并分支。<br>　5．把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>　6．生成补丁（patch），把补丁发送给主开发者。<br>　7．看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。<br>　8．一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。</p><p>从主开发者的角度看（假设主开发者不用开发代码），git有以下功能：</p><p>　1．查看邮件或者通过其它方式查看一般开发者的提交状态。<br>　2．打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。<br>　3．向公共服务器提交结果，然后通知所有开发人员。 </p><h2 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h2><p>SVN是Subversion的简称，是一个开源的版本控制系统，支持大多数常见的操作系统。作为一个开源的版本控制系统，Subversion管理着随时间改变的数据，这些数据放置在一个中央资料档案库（repository）中，这个档案库很像一个普通的文件服务器,不过它会记住每一次文件的变动，这样你就可以把档案恢复到旧的版本，或是浏览文件的变动历史。Subversion是一个通用的系统,可用来管理任何类型的文件，其中包括程序源码。</p><p><strong>工作流程：</strong></p><p>集中式管理的工作流程如下图：<br><img src="/2020/08/01/git-vs-svn/svn_process.jpg" alt="svn process"></p><p>集中式代码管理的核心是服务器，所有开发者在开始新一天的工作之前必须从服务器获取代码，然后开发，最后解决冲突，提交。所有的版本信息都放在服务器上。如果脱离了服务器，开发者基本上可以说是无法工作的。</p><p><strong>功能特性：</strong></p><p>　1．从服务器下载项目组最新代码。<br>　2．进入自己的分支，进行工作，每隔一个小时向服务器自己的分支提交一次代码（很多人都有这个习惯，因为有时候自己对代码改来改去，最后又想还原到前一个小时的版本，或者看看前一个小时自己修改了哪些代码，就需要这样做了）。<br>　3．下班时间快到了，把自己的分支合并到服务器主分支上，一天的工作完成，并反映给服务器。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li><p>适用对象不同。Git适用于参与开源项目的开发者，他们由于水平高，更在乎的是效率而不是易用性。SVN则不同，它适合普通的公司开发团队，使用起来更加容易。</p></li><li><p>使用的场合不同。Git适用于通过Internet，有多个开发角色的单个项目开发。SVN适合企业内部由项目经理统一协调的多个并行项目的开发。</p></li><li><p>权限管理策略不同。Git没有严格的权限管理控制，只要有帐号，就可以导出、导入代码，甚至执行回退操作。SVN则有严格的权限管理，可以按组、按个人进行针对某个子目录的权限控制，区分读、写权限。更严格的，不支持回退操作，保证代码永远可以追踪。</p></li><li><p>分支（branch）的使用范围不同。Git中，你只能针对整个仓库作branch，而且一旦删除，便无法恢复。而SVN中，branch可以针对任何子目录，它本质上是一个拷贝操作，所以，可以建立非常多、层次性的branch，并且，在不需要时将其删除，而以后需要时只要checkout老的SVN版本就可以了。</p></li><li><p>基于第三点，Git适用于单纯的软件项目，典型的就是一些开源项目，比如Linux内核、busybox等。相反，SVN擅长多项目管理。比如，你可以在一个SVN仓库中存放一个手机项目的bsp/设计文档/文件系统/应用程序/自动化编译脚本，或者在一个SVN中存放5款手机项目的文件系统。git中必须建立n（项目数）* m（组件数）个仓库。SVN中只需要最多n或者m个就可以了。</p></li><li><p>Git使用128位ID作为版本号，而且checkout时要注明是哪个branch，而SVN使用一个递增的序列号作为全局唯一的版本号，更加简明易懂。虽然可以使用gittag来建立一些文字化的别名，但是毕竟那只是针对特殊版本。</p></li><li><p>可跟踪性，git的典型开发过程为：建立分支，进行开发，提交到本地master，删除分支。这样做的后果是以前的修改细节会丢失。而在SVN下做同样的事情，不会丢失任何细节。这里是一个有趣的链接，表明了git下典型的工作方式：（以master为核心，不断创建新branch，删除旧branch)。</p></li><li><p>局部更新，局部还原。SVN由于是在每个文件夹建立一个.svn文件夹来实现管理，所以可以很简单实现局部更新或者还原。假如你只希望更新某些部分，则svn可以很好实现。同时代码写错了，同时可以很好实现局部还原，当然git也可以通过历史版本还原，但是无法简单地实现局部还原。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>公司的开发团队在进行项目开发管理时，svn是更好的选择，团队成员共同维护公司的中心版本。若是开源项目，则git更加适合，每个人都可以维护自己专属的版本，同时有github开源社区支持。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.github.com/en/github">github官网</a></li><li><a href="https://baike.baidu.com/item/GIT/12647237#3">百度百科-git</a></li><li><a href="https://blog.csdn.net/mine_song/article/details/70770467">SVN和GIT介绍，区别，使用</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>版本控制（git svn）</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>svn</tag>
      
      <tag>introduction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2020/07/29/hello-hexo/"/>
    <url>/2020/07/29/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
